#include <iostream>
//#include <openssl/sha.h>
#include <cmath>
#include <string>
#include <time.h>
using namespace std;

int entries[1000] = 
{425003, 673106, 144026, 110051, 791113, 282007, 801105, 110087, 462042, 827003, 131001, 335001, 413515, 140201, 691302, 560016, 110033, 203202, 491001, 464990, 0, 331803, 0, 560022, 274001, 721303, 136027, 500046, 606603, 333031, 246746, 180004, 530015, 679322, 246746, 744202, 0, 390023, 246469, 737103, 500072, 641114, 324005, 560078, 783331, 231216, 733130, 394510, 249403, 737132, 638476, 560093, 160, 208010, 832101, 474001, 142043, 676122, 442404, 790104, 110094, 110009, 209402, 110093, 461001, 490025, 307501, 673008, 413304, 302012, 562159, 221104, 110093, 686563, 574227, 201301, 508248, 132157, 209601, 497449, 452001, 110063, 209801, 110002, 524230, 464001, 282010, 695551, 262308, 132001, 0, 231001, 144508, 670327, 768216, 641002, 221005, 695026, 282010, 136027, 209311, 841438, 812002, 244924, 140507, 442001, 783385, 0, 123001, 827013, 284401, 812001, 144521, 486001, 801113, 151504, 246701, 281006, 474012, 134003, 451115, 847223, 221711, 144006, 676519, 629302, 175124, 135001, 841301, 201206, 0, 110006, 534202, 211001, 21911, 110017, 143504, 251319, 751024, 560086, 244301, 695030, 786001, 131001, 250611, 110001, 394110, 248197, 737135, 194101, 302016, 500014, 0, 202138, 248001, 600119, 333025, 580030, 784180, 250501, 474002, 497331, 110034, 333515, 441601, 686142, 411062, 586103, 232101, 815301, 110041, 835210, 452012, 151203, 680507, 441111, 792102, 110042, 110059, 204101, 413517, 670741, 591220, 121001, 110059, 226002, 844127, 490024, 466331, 335051, 799143, 440013, 673592, 110092, 0, 790102, 226021, 110058, 452001, 828113, 144026, 641016, 182104, 676101, 110006, 283125, 160101, 395006, 263127, 123102, 246734, 323307, 563114, 221106, 110035, 700064, 685551, 500089, 201206, 602106, 335001, 454001, 801503, 135003, 208021, 151001, 686016, 152024, 781365, 180003, 135001, 224122, 854303, 144211, 221310, 201002, 131001, 110091, 177033, 141112, 765001, 501509, 583101, 211019, 670702, 476111, 494228, 782002, 121102, 244412, 491228, 110010, 518502, 474006, 250002, 123024, 737122, 262701, 683110, 136118, 700019, 110003, 145023, 413501, 585105, 767770, 683524, 333041, 562157, 271203, 0, 273201, 497778, 784176, 464986, 110002, 110007, 534204, 573142, 641654, 325205, 380059, 175011, 131403, 824143, 110007, 154001, 695005, 251202, 678623, 229406, 313004, 125051, 791001, 842002, 482001, 110092, 686631, 148023, 110092, 497557, 212303, 792001, 110042, 142001, 689542, 442402, 141415, 126112, 834001, 482021, 203131, 110071, 581314, 695317, 144004, 410202, 225001, 125005, 452001, 494001, 782460, 247776, 572103, 0, 282001, 335513, 636008, 246472, 125051, 744202, 207123, 517002, 180011, 737126, 263641, 382421, 173209, 302020, 631003, 744107, 500090, 262308, 206001, 734015, 580001, 737138, 324001, 263153, 384001, 231206, 160019, 683563, 184142, 143411, 110096, 473638, 814112, 273007, 110052, 110093, 791001, 440001, 302012, 685553, 311001, 494005, 451666, 110084, 203205, 562130, 411039, 673639, 131001, 500072, 211011, 457001, 516115, 110054, 209729, 110043, 494552, 136119, 243202, 263151, 680306, 781003, 576231, 228001, 757107, 680301, 147201, 221503, 110091, 828128, 121002, 281403, 222001, 603203, 415409, 148001, 247554, 801108, 828205, 124001, 232120, 176304, 673602, 782561, 464111, 144514, 487551, 844114, 792122, 799001, 151204, 801111, 474011, 192122, 125001, 843118, 792001, 480106, 680307, 201008, 233001, 151001, 845412, 132001, 173101, 600037, 222149, 522549, 403201, 497101, 455223, 130123, 226026, 110032, 560091, 232101, 686015, 151501, 770017, 140301, 110086, 136034, 671323, 281124, 737113, 262501, 365007, 283121, 744210, 685515, 193402, 301411, 638657, 500011, 246763, 394305, 723121, 581115, 800007, 491441, 483501, 110096, 227405, 562106, 442202, 686631, 151001, 441222, 471001, 822133, 201307, 110058, 497231, 110092, 791104, 416004, 673573, 846006, 276001, 110063, 151001, 562125, 683544, 402201, 221005, 326520, 454552, 497442, 110063, 201306, 791001, 0, 110053, 670641, 411032, 638052, 148024, 825301, 482001, 160, 201001, 110006, 560017, 733132, 271201, 134204, 263642, 396191, 788152, 110034, 233302, 587111, 324005, 246701, 229135, 520008, 689584, 141001, 843103, 125050, 294388, 782003, 143505, 824113, 127308, 136135, 273303, 683102, 145521, 201204, 206002, 766012, 140406, 0, 122413, 673586, 462009, 226016, 473112, 523241, 110055, 125075, 497001, 470335, 123106, 227101, 753003, 591114, 242001, 676123, 110002, 246725, 686651, 462031, 796017, 560038, 202280, 0, 761111, 577228, 421301, 148026, 110062, 721102, 14754, 203205, 326001, 574236, 534275, 110018, 110016, 781001, 160023, 121007, 209625, 0, 391240, 301409, 689676, 641107, 680664, 152001, 454116, 110034, 848209, 125001, 311001, 273001, 201307, 148101, 691524, 110062, 803213, 152114, 148024, 846001, 454446, 132117, 208008, 212201, 143401, 845438, 483501, 491771, 474006, 132116, 843113, 276135, 144602, 575001, 679326, 603002, 400009, 110060, 121003, 175032, 201306, 247777, 0, 136132, 110052, 132001, 205001, 11059, 678597, 203131, 192231, 245408, 136042, 370110, 171102, 208021, 560035, 221002, 532312, 263201, 110073, 247667, 125001, 682040, 212601, 313001, 247452, 0, 110064, 202001, 274301, 124001, 791001, 493116, 686105, 0, 151201, 577202, 148023, 411018, 801505, 244501, 462041, 124001, 834009, 624615, 144101, 442001, 110034, 821305, 790102, 851133, 737113, 248014, 487551, 700141, 243406, 577002, 691554, 441001, 334001, 412202, 700035, 370655, 110007, 250342, 788010, 110019, 631102, 591102, 0, 249147, 383001, 227813, 110052, 670123, 464884, 342003, 641042, 110040, 828103, 457001, 201308, 110094, 134104, 688538, 441203, 302004, 110076, 0, 484774, 689647, 147103, 333031, 833220, 461111, 132107, 124104, 110059, 226025, 425409, 151505, 686615, 307026, 247554, 636108, 454001, 815351, 122001, 282001, 736179, 759128, 577545, 422003, 670721, 626001, 132024, 262311, 465106, 229001, 160022, 110059, 671321, 791110, 495330, 500009, 562101, 500031, 327801, 131001, 500098, 131101, 680681, 221002, 636103, 210204, 591213, 759015, 735133, 110040, 124103, 249201, 175126, 206001, 524124, 585401, 208012, 795001, 560036, 160, 110007, 134109, 637102, 144202, 142047, 673005, 821302, 250001, 0, 110092, 275201, 122002, 791111, 678003, 271308, 306701, 148023, 682021, 140111, 801109, 464221, 110059, 152025, 800020, 454552, 854105, 124507, 123501, 274505, 560036, 670663, 142032, 613403, 761200, 142037, 800011, 122001, 204101, 0, 110054, 176025, 131001, 231301, 670692, 203131, 795113, 560078, 281121, 534006, 110073, 121001, 446000, 208017, 110094, 250205, 842001, 410503, 679308, 305009, 210426, 635814, 473001, 825314, 110085, 845411, 273165, 486001, 670141, 342602, 621113, 248006, 550, 361006, 110010, 201304, 110016, 110022, 781125, 560010, 211008, 307027, 507116, 204101, 110022, 735232, 581115, 411039, 670142, 152026, 250101, 737139, 263139, 679531, 454665, 301403, 506310, 262405, 110001, 277301, 791110, 110008, 560024, 600087, 249401, 473660, 700019, 242405, 560011, 695551, 444606, 335804, 474001, 641653, 852212, 464551, 207123, 262311, 110043, 682320, 424206, 0, 533106, 825318, 360023, 226002, 110075, 572026, 476111, 847422, 462003, 600075, 141001, 141006, 670325, 209801, 135001, 0, 791110, 480661, 233001, 0, 609605, 144001, 627805, 125001, 450331, 110051, 201301, 795103, 560062, 206001, 176061, 250609, 110006, 123021, 110041, 768038, 221010, 226005, 680028, 123501, 283203, 176216, 390002, 124201, 110027, 201012, 521001, 585222, 247776, 302019, 250001, 695572, 121001, 244221, 500005, 241321, 110059, 768001, 0, 490023, 121001, 274001, 803119, 412805, 143512, 587115, 759106, 686031, 638111, 571602, 825406, 135133, 262701, 464668, 0, 208008, 802301, 110014, 411007, 144401, 452001, 110039, 263141, 737111, 442604, 679552, 560062, 344032, 201003, 732121, 501101, 303012, 560032, 110017, 788931, 226010, 110016, 370205, 110017, 248002, 303503, 486661, 344001, 680569, 110085, 212659, 450001, 827001};// Copied from https://arraythis.com/ after copying the first 1000 elements of the csv


int h1(int x)
{
    return x % 50;
}

const int p = 98899;
// adjust as needed


int h2(int x, int seed = time(0))
{
    srand(seed);

    int a = rand() % p;
    int b = rand() % p;
    long long unsigned y = a*x + b;
    return (y % p) % 50;
}

int h3(int x)
{
    string strX = std::to_string(x);
    // TO DO: There is an implimentation chatgpt easily gives, which involves
    // getting the array produced by sha-256 (gives 2^256 unique hashes), taking it
    // first 8 bytes (gives only 2^64 unique hashes) which can now be stored in a
    // big C++ integer, and then taking modulo 50.

    // Unclear if this is what the question expects, awaiting email response for this question
    return 0;
}

float std_deviation(int arr[], int size, int alpha) 
// calculating this against the load factor alpha = 1000/50 = 20 should give us a measure of how
// uniform the function is. The closer the standard deviation is to 0, the better the fucntion.
{
    double numerator = 0.0;
    for (int i = 0; i < size; i++)
    {
        numerator = numerator + pow((arr[i] - alpha), 2.0);
    }

    double variance = numerator / double (size - 1);
    double std_dev = sqrt(variance);

    return std_dev;
}

int main()
{
    int arr1[1000];
    int arr2[1000];
    int arr3[1000];

    for (int i = 0; i < 1000; i++)
    {
        arr1[i] = h1(entries[i]);
    }

    for (int i = 0; i < 1000; i++)
    {
        cout << arr1[i] << ", ";
    }

    for (int i = 0; i < 1000; i++)
    {
        arr2[i] = h2(entries[i]);
    }

    cout << endl;
    cout << endl;

    for (int i = 0; i < 1000; i++)
    {
        cout << arr2[i] << ", ";
    }

    /*for (int i = 0; i < 1000; i++)
    {
        arr3[i] = h3(entries[i]);
    }*/

    cout << "Standard Deviation from first hash function is: " << std_deviation(arr1, 1000, 20) << endl;
    cout << "Standard Deviation from second hash function is: " << std_deviation(arr2, 1000, 20) << endl;

    return 0;
}